#ifndef DATA_H
#define DATA_H


//! PARAMETERS
#define GAME_SIZE_N                                         5

// Mass decay params.  Levels:   ... 1.0 ... 2.0 ... 5.0 ... 10.0 ...
#define GAME_DECAY_1                                    0
#define GAME_DECAY_2                                   67
#define GAME_DECAY_3                                 200
#define GAME_DECAY_4                                 333
#define GAME_DECAY_5                                 500
#define GAME_DECAY_BOOST                          1

// Link building profiles.  Levels:   ... 1.0 ... 2.0 ... 5.0 ... 10.0 ...
#define GAME_LINK_BUILD_M_1                     0
#define GAME_LINK_BUILD_M_2                   80
#define GAME_LINK_BUILD_M_3                 300
#define GAME_LINK_BUILD_M_4                 600
#define GAME_LINK_BUILD_M_5                 800
#define GAME_LINK_BUILD_M_BOOST       2.0
#define GAME_LINK_BUILD_L_1                     13
#define GAME_LINK_BUILD_L_2                     13
#define GAME_LINK_BUILD_L_3                     33
#define GAME_LINK_BUILD_L_4                     65
#define GAME_LINK_BUILD_L_5                     65
#define GAME_LINK_BUILD_L_BOOST           3

// Mass draining params.  Levels:   ... 1.0 ... 2.0 ... 5.0 ... 10.0 ...
#define GAME_DRAIN_MASS_1                    200
#define GAME_DRAIN_MASS_2                    200
#define GAME_DRAIN_MASS_3                    400
#define GAME_DRAIN_MASS_4                    666
#define GAME_DRAIN_MASS_5                  1000
#define GAME_DRAIN_MASS_BOOST             1






//   Mass, x1,000,000
//      <  1,000,000  Very Small   (size=1)
//      <  2,000,000  Small            (size=2)
//      <  5,000,000  Medium       (size=3)
//      <10,000,000  Large            (size=4)
//      >10,000,000  Very Large   (size=5)
//      >17,000,000  Very Very Large   (size=5)
quint32 rank( qint32 mass)
{
    if( mass <= 0) mass = 0;
    else if( mass<1000000) mass = 1;
    else if( mass<2000000) mass = 2;
    else if( mass<5000000) mass = 3;
    else if( mass<10000000) mass = 4;
    else mass = 5;
    return mass;
}
qint32 mLow[] = {0, 0, 1000000, 2000000, 5000000, 10000000, 0};

qint32   dmDecay[0x0010] = {0,
                             GAME_DECAY_1,
                             GAME_DECAY_2,
                             GAME_DECAY_3,
                             GAME_DECAY_4,
                             GAME_DECAY_5,
                             0,0,0,0,0,0,0,0,0,0};

qint32   dmBuilding[0x0010] = {0,
                             GAME_LINK_BUILD_M_1,
                             GAME_LINK_BUILD_M_2,
                             GAME_LINK_BUILD_M_3,
                             GAME_LINK_BUILD_M_4,
                             GAME_LINK_BUILD_M_5,
                             0,0,0,0,0,0,0,0,0,0};
quint32   dlBuilding[0x0010] = {0,
                             GAME_LINK_BUILD_L_1,
                             GAME_LINK_BUILD_L_2,
                             GAME_LINK_BUILD_L_3,
                             GAME_LINK_BUILD_L_4,
                             GAME_LINK_BUILD_L_5,
                             0,0,0,0,0,0,0,0,0,0};

qint32   dmDraining[0x0010] = {0,
                             GAME_DRAIN_MASS_1,
                             GAME_DRAIN_MASS_2,
                             GAME_DRAIN_MASS_3,
                             GAME_DRAIN_MASS_4,
                             GAME_DRAIN_MASS_5,
                             0,0,0,0,0,0,0,0,0,0};


// Drain (% from m) in 2 minutes. X = dm : 1.0 ... 1.5 ...   ... 10. (dim=19). Y = m : 1.0 ... 1.5 ...    ... 20. (dim=39)
quint16 matrixDrain2[] = {
60,	60,	60,	60,	60,	60,	60,	70,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,
40,	40,	40,	40,	40,	40,	40,	47,	80,	80,	80,	80,	80,	80,	80,	80,	95,	100,	100,
30,	30,	30,	30,	30,	30,	30,	35,	60,	60,	60,	60,	60,	60,	60,	60,	71,	86,	100,
24,	24,	24,	24,	24,	24,	24,	33,	48,	48,	48,	48,	48,	48,	48,	48,	59,	70,	80,
20,	20,	20,	20,	20,	20,	20,	28,	40,	40,	40,	40,	40,	40,	40,	41,	50,	58,	67,
17,	17,	17,	17,	17,	17,	17,	24,	34,	34,	34,	34,	34,	34,	34,	36,	43,	50,	57,
15,	15,	15,	15,	15,	15,	15,	21,	30,	30,	30,	30,	30,	30,	30,	31,	37,	44,	50,
13,	13,	13,	13,	13,	13,	13,	18,	27,	27,	27,	27,	27,	27,	27,	28,	33,	39,	44,
12,	12,	12,	12,	12,	12,	12,	17,	24,	24,	24,	24,	24,	24,	24,	25,	30,	35,	40,
11,	11,	11,	11,	11,	11,	11,	17,	22,	22,	22,	22,	22,	22,	22,	24,	28,	33,	36,
10,	10,	10,	10,	10,	10,	12,	14,	20,	20,	20,	20,	20,	20,	20,	23,	27,	30,	33,
9,	9,	9,	9,	9,	9,	9,	13,	18,	18,	18,	18,	18,	18,	18,	22,	25,	28,	31,
9,	9,	9,	9,	9,	9,	9,	12,	17,	17,	17,	17,	17,	17,	17,	20,	23,	26,	29,
8,	8,	8,	8,	8,	8,	8,	11,	16,	16,	16,	16,	16,	16,	16,	19,	21,	24,	27,
8,	8,	8,	8,	8,	8,	8,	10,	15,	15,	15,	15,	15,	15,	15,	17,	20,	22,	25,
7,	7,	7,	7,	7,	7,	7,	10,	14,	14,	14,	14,	14,	14,	14,	16,	19,	21,	24,
7,	7,	7,	7,	7,	7,	7,	9,	13,	13,	13,	13,	13,	13,	13,	16,	18,	20,	22,
6,	6,	6,	6,	6,	6,	6,	9,	13,	13,	13,	13,	13,	13,	13,	15,	17,	19,	21,
6,	6,	6,	6,	6,	6,	6,	8,	12,	12,	12,	12,	12,	12,	12,	14,	16,	18,	20,
6,	6,	6,	6,	6,	6,	6,	9,	11,	11,	11,	11,	11,	11,	12,	14,	16,	17,	19,
5,	5,	5,	5,	5,	5,	6,	9,	11,	11,	11,	11,	11,	11,	12,	13,	15,	17,	18,
5,	5,	5,	5,	5,	5,	6,	8,	10,	10,	10,	10,	10,	10,	11,	13,	14,	16,	17,
5,	5,	5,	5,	5,	5,	6,	8,	10,	10,	10,	10,	10,	10,	11,	12,	14,	15,	17,
5,	5,	5,	5,	5,	5,	6,	8,	10,	10,	10,	10,	10,	10,	11,	12,	13,	15,	16,
5,	5,	5,	5,	5,	5,	5,	7,	9,	9,	9,	9,	9,	9,	10,	12,	13,	14,	15,
4,	4,	4,	4,	4,	4,	5,	7,	9,	9,	9,	9,	9,	9,	10,	11,	12,	14,	15,
4,	4,	4,	4,	4,	4,	5,	7,	9,	9,	9,	9,	9,	9,	10,	11,	12,	13,	14,
4,	4,	4,	4,	4,	4,	5,	7,	8,	8,	8,	8,	8,	8,	9,	10,	11,	13,	14,
4,	4,	4,	4,	4,	4,	5,	6,	8,	8,	8,	8,	8,	8,	9,	10,	11,	12,	13,
4,	4,	4,	4,	4,	4,	5,	6,	8,	8,	8,	8,	8,	8,	9,	10,	11,	12,	13,
4,	4,	4,	4,	4,	4,	4,	6,	8,	8,	8,	8,	8,	8,	8,	9,	10,	11,	12,
4,	4,	4,	4,	4,	4,	4,	6,	7,	7,	7,	7,	7,	7,	8,	9,	10,	11,	12,
4,	4,	4,	4,	4,	4,	4,	6,	7,	7,	7,	7,	7,	7,	8,	9,	10,	11,	12,
3,	3,	3,	3,	3,	3,	4,	5,	7,	7,	7,	7,	7,	7,	8,	9,	10,	10,	11,
3,	3,	3,	3,	3,	3,	4,	5,	7,	7,	7,	7,	7,	7,	7,	8,	9,	10,	11,
3,	3,	3,	3,	3,	3,	4,	5,	6,	6,	6,	6,	6,	6,	7,	8,	9,	10,	11,
3,	3,	3,	3,	3,	3,	4,	5,	6,	6,	6,	6,	6,	6,	7,	8,	9,	10,	11,
3,	3,	3,	3,	3,	3,	4,	5,	6,	6,	6,	6,	6,	6,	7,	8,	9,	9,	10,
3,	3,	3,	3,	3,	3,	4,	5,	6,	6,	6,	6,	6,	6,	7,	7,	8,	9,	10
};

// Drain (% from m) in 5 minutes. X = dm : 1.0 ... 1.5 ...   ... 10. (dim=19). Y = m : 1.0 ... 1.5 ...    ... 20. (dim=39)
quint16 matrixDrain5[] = {
    100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,
    100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,
    75,	75,	75,	75,	75,	75,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,	100,
    60,	60,	60,	60,	60,	65,	85,	95,	97,	97,	97,	97,	97,	97,	97,	97,	97,	97,	98,
    50,	50,	50,	50,	50,	58,	75,	87,	95,	95,	95,	95,	95,	95,	95,	95,	95,	96,	97,
    43,	43,	43,	43,	43,	54,	64,	75,	86,	86,	87,	89,	94,	94,	94,	94,	95,	96,	96,
    37,	37,	37,	37,	38,	47,	56,	66,	75,	75,	75,	79,	86,	93,	93,	94,	94,	95,	95,
    33,	33,	33,	33,	33,	42,	50,	58,	67,	67,	67,	71,	78,	83,	89,	93,	94,	94,	95,
    30,	30,	30,	30,	30,	38,	45,	52,	60,	60,	60,	65,	70,	75,	80,	85,	90,	94,	95,
    27,	27,	27,	27,	30,	36,	43,	50,	55,	55,	56,	60,	65,	69,	74,	78,	83,	87,	91,
    25,	25,	25,	25,	29,	35,	42,	44,	50,	50,	52,	56,	60,	64,	68,	73,	77,	80,	83,
    23,	23,	23,	23,	29,	35,	35,	40,	46,	46,	49,	53,	56,	60,	64,	68,	71,	74,	77,
    21,	21,	21,	23,	29,	29,	32,	37,	43,	43,	46,	50,	53,	57,	60,	63,	66,	69,	71,
    20,	20,	20,	23,	23,	25,	30,	35,	40,	40,	44,	47,	50,	53,	56,	59,	61,	64,	67,
    19,	19,	19,	19,	19,	23,	28,	33,	37,	39,	42,	45,	47,	50,	52,	55,	57,	60,	62,
    18,	18,	18,	18,	18,	22,	26,	31,	35,	37,	40,	42,	45,	47,	49,	52,	54,	56,	59,
    17,	17,	17,	17,	17,	21,	25,	29,	33,	35,	38,	40,	42,	44,	47,	49,	51,	53,	56,
    16,	16,	16,	16,	16,	20,	24,	28,	32,	34,	36,	38,	40,	42,	44,	46,	48,	50,	53,
    15,	15,	15,	15,	15,	19,	23,	26,	30,	32,	34,	36,	38,	40,	42,	44,	46,	48,	50,
    14,	14,	14,	14,	15,	19,	22,	26,	29,	31,	33,	35,	37,	38,	40,	42,	44,	46,	48,
    14,	14,	14,	14,	15,	19,	22,	25,	28,	30,	32,	33,	35,	37,	39,	41,	42,	44,	45,
    13,	13,	13,	13,	15,	19,	22,	24,	27,	29,	31,	32,	34,	36,	37,	39,	41,	42,	43,
    12,	12,	12,	13,	16,	19,	21,	23,	26,	28,	30,	31,	33,	35,	36,	37,	39,	40,	42,
    12,	12,	12,	13,	16,	18,	20,	22,	25,	27,	29,	30,	32,	33,	35,	36,	37,	39,	40,
    12,	12,	12,	13,	15,	17,	19,	21,	25,	26,	28,	29,	31,	32,	33,	35,	36,	37,	38,
    11,	11,	11,	13,	15,	17,	19,	20,	24,	26,	27,	28,	30,	31,	32,	33,	35,	36,	37,
    11,	11,	11,	12,	14,	16,	18,	20,	23,	25,	26,	27,	29,	30,	31,	32,	33,	34,	36,
    10,	10,	10,	12,	14,	16,	17,	19,	23,	24,	25,	26,	28,	29,	30,	31,	32,	33,	34,
    10,	10,	10,	12,	13,	15,	17,	18,	22,	23,	24,	26,	27,	28,	29,	30,	31,	32,	33,
    10,	10,	10,	11,	13,	15,	16,	18,	21,	23,	24,	25,	26,	27,	28,	29,	30,	31,	32,
    9,	9,	9,	11,	13,	14,	16,	17,	21,	22,	23,	24,	25,	26,	27,	28,	29,	30,	31,
    9,	9,	9,	11,	12,	14,	15,	17,	20,	21,	22,	23,	24,	25,	26,	27,	28,	29,	30,
    9,	9,	9,	10,	12,	13,	15,	16,	20,	21,	22,	23,	24,	24,	25,	26,	27,	28,	29,
    9,	9,	9,	10,	11,	13,	14,	16,	19,	20,	21,	22,	23,	24,	25,	26,	27,	28,	29,
    8,	8,	8,	10,	11,	12,	14,	15,	19,	19,	20,	21,	22,	23,	24,	25,	26,	27,	28,
    8,	8,	8,	9,	11,	12,	14,	15,	18,	19,	20,	21,	22,	22,	23,	24,	25,	26,	27,
    8,	8,	8,	9,	11,	12,	13,	14,	18,	18,	19,	20,	21,	22,	23,	24,	25,	25,	26,
    8,	8,	8,	9,	10,	12,	13,	14,	17,	18,	19,	20,	20,	21,	22,	23,	24,	25,	26,
    7,	7,	7,	9,	10,	11,	12,	14,	17,	17,	18,	19,	20,	21,	22,	22,	23,	24,	25,};




#endif // DATA_H
